%right '='
%left AND OR 
%left '>' '<' LESS_EQUALS GREATER_EQUALS EQUALS DISTINCT
%left '+' '-'
%left '*' '/' '%'
%nonassoc '!'
%nonassoc UNARY
%nonassoc CAST
%left '.'
%nonassoc '[' ']'
%nonassoc '(' ')'
%nonassoc MENOR_QUE_ELSE
%nonassoc ELSE
%{
// * Declaraciones de código Java
// * Se sitúan al comienzo del archivo generado
// * El package lo añade yacc si utilizamos la opción -Jpackage
import scanner.Scanner;
import java.io.Reader;
import ast.definitions.*;
import ast.expressions.*;
import ast.main.*;
import ast.sentencias.*;
import ast.type.*;
import java.util.List;
import java.util.ArrayList;
%}

// * Declaraciones Yacc
%token INT_CONSTANT
%token ID
%token REAL_CONSTANT
%token CHAR_CONSTANT
%token DEF
%token INT
%token DOUBLE
%token CHAR
%token MAIN
%token IF
%token ELSE
%token WRITE
%token READ
%token STRUCT
%token RETURN
%token LESS_EQUALS
%token GREATER_EQUALS
%token WHILE
%token VOID
%token EQUALS
%token DISTINCT
%token OR
%token AND
%%
// * Gramática y acciones Yacc

programa: definiciones main							{ ((List<Definition>)$1).add((Definition)$2); AST = new Program(getLine(),getColumn(),(List<Definition>)$1); }
		| main										{ List<Definition> aux = new ArrayList<Definition>(); aux.add((Definition)$1); AST = new Program(getLine(),getColumn(),aux); }
		;

definiciones: definicionVariable					{ $$ = $1; }
			| definicionFuncion						{ List<Definition> aux = new ArrayList<Definition>(); aux.add((Definition)$1); $$=aux;}
			| definiciones definicionVariable		{ ((List<Definition>)$1).addAll((List<Definition>)$2); $$ = $1;}
			| definiciones definicionFuncion		{ $$ = $1; ((List<Definition>)$$).add((Definition)$2);}
			;
			
definicionVariable: identificadoresCS ':' tipo ';'	{ List<VarDefinition> aux = new ArrayList<VarDefinition>(); for(String st : (List<String>)$1){ aux.add(new VarDefinition(getLine(),getColumn(),st,(Type)$3)); } $$=aux; }
				  ;

tipoSimple: INT										{ $$ = IntType.getInstancia();   }
	| DOUBLE										{ $$ = RealType.getInstancia();  }
	| CHAR											{ $$ = CharType.getInstancia();  }
	;

identificadoresCS: ID								{ $$ = new ArrayList<String>(); ((List<String>)$$).add((String)$1); }
				| identificadoresCS ',' ID			{ $$ = $1; if(((List<String>)$$).contains((String)$3)) new ErrorType(getLine(),getColumn(),"ERROR: La variable " + (String)$3 + " ya está declarada."); ((List<String>)$$).add((String)$3); }
				;

definicionFuncion: DEF ID '(' parametrosOpt ')' ':' retorno cuerpoFuncion		 { $$ = new FuncDefinition(getLine(),getColumn(),(String)$2,new FunctionType(getLine(),getColumn(),(List<VarDefinition>)$4,(Type)$7),(List<Statement>)$8); }
				 ;

retorno: VOID										{ $$ = VoidType.getInstancia(); }
		| tipoSimple								{ $$ = $1; }
		;
	
parametrosOpt: 										{ $$ = new ArrayList<VarDefinition>(); }
			| parametros							{ $$ = $1; }
			;
			
parametros: ID ':' tipoSimple						{ $$ = new ArrayList<VarDefinition>(); ((List<VarDefinition>)$$).add( new VarDefinition(getLine(),getColumn(),(String)$1,(Type)$3) ); }
		 | parametros ',' ID ':' tipoSimple			{ ((List<VarDefinition>)$1).add( new VarDefinition(getLine(),getColumn(),(String)$3,(Type)$5) ); $$ = $1; }
		 ;
		 
cuerpoFuncion: '{' definicionesVariables sentenciasOpt '}'		{ $$ = $2; ((List<Statement>)$$).addAll((List<Statement>)$3); }
			 | '{' sentenciasOpt '}'							{ $$ = $2; }
			 ;

definicionesVariables: definicionVariable			{ $$ = $1; }
					 | definicionesVariables definicionVariable  { $$ = $1; ((List<VarDefinition>)$$).addAll((List<VarDefinition>)$2); }
					 ;
					 
sentenciasOpt: 										{ $$ = new ArrayList<Statement>(); }
			 | sentencias							{ $$ = $1; }
			 ;

sentencias: sentencia								{ $$ = $1; }
		  | sentencias sentencia					{ $$ = $1; ((List<Statement>)$$).addAll((List<Statement>)$2); }
		  ;
			
sentencia: WRITE expresionesCS ';'					{ List<Statement> aux = new ArrayList<Statement>(); for(Expression st : (List<Expression>)$2){ aux.add(new Write(getLine(),getColumn(),st)); } $$=aux; }	
		 | READ expresionesCS ';'					{ List<Statement> aux = new ArrayList<Statement>(); for(Expression st : (List<Expression>)$2){ aux.add(new Read(getLine(),getColumn(),st));  } $$=aux; }	
		 | RETURN expression ';'					{ $$ = new ArrayList<Statement>(); ((List<Statement>)$$).add(new Return(getLine(),getColumn(),(Expression)$2)); }
		 | ifElse									{ $$ = new ArrayList<Statement>(); ((List<Statement>)$$).add((Statement)$1); }
		 | WHILE expression ':' cuerpoCondicional	{ $$ = new ArrayList<Statement>(); ((List<Statement>)$$).add(new While(((Expression)$2).getLine(),((Expression)$2).getColumn(),(Expression)$2,(List<Statement>)$4)); }
		 | ID '(' expresionesCSOpt ')' ';'			{ $$ = new ArrayList<Statement>(); Variable var = new Variable(getLine(),getColumn(),(String)$1); ((List<Statement>)$$).add(new Invocation(getLine(),getColumn(),var,(List<Expression>)$3)); }
		 | expression '=' expression ';'			{ $$ = new ArrayList<Statement>(); ((List<Statement>)$$).add(new Assignment(getLine(),getColumn(),(Expression)$1,(Expression)$3)); }
		 ;
		 
ifElse: IF expression ':' cuerpoCondicional	   %prec MENOR_QUE_ELSE					{ $$ = new IfStatement(getLine(),getColumn(),(Expression)$2,(List<Statement>)$4,new ArrayList<Statement>()); }
	   | IF expression ':' cuerpoCondicional ELSE cuerpoCondicional  %prec ELSE		{ $$ = new IfStatement(getLine(),getColumn(),(Expression)$2,(List<Statement>)$4,(List<Statement>)$6); }
	   ;

cuerpoCondicional: '{' sentenciasOpt '}'			{ $$ = $2; }
				 | sentencia						{ $$ = $1; }
				 ;

main: DEF MAIN '(' ')' ':' VOID cuerpoFuncion		{ $$ = new FuncDefinition(getLine(),getColumn(),"main",new FunctionType(getLine(),getColumn(),new ArrayList<VarDefinition>(),VoidType.getInstancia()),(List<Statement>)$7); }
	;


tipo: tipoSimple									{ $$ = $1; } 
	| estructura									{ $$ = $1; }
	| '[' INT_CONSTANT ']' tipo						{ $$ = new ArrayType(getLine(),getColumn(),(int)$2,(Type)$4); }
	;

estructura: STRUCT '{'	definicionesCamposOpt '}'	{ $$ = new RecordType(getLine(),getColumn(),(List<RecordField>)$3); }

definicionesCamposOpt: 								{ $$ = new ArrayList<RecordType>(); }
					 | definicionesCampos			{ $$ = $1; }
					 ;
					 
definicionesCampos: definicionCampo						{ $$ = $1; }
				  | definicionesCampos definicionCampo  { $$ = $1; comprobarCamposRepetidos((List<RecordField>)$$,(List<RecordField>)$2); ((List<RecordField>)$$).addAll((List<RecordField>)$2); }
				  ;
					 
definicionCampo: identificadoresCS ':' tipo ';'	{ List<RecordField> aux = new ArrayList<RecordField>(); for(String st : (List<String>)$1){ aux.add(new RecordField(st,(Type)$3)); } $$=aux; }
			   ;		 
				
expresionesCSOpt:									{ $$ = new ArrayList<Expression>(); }
				| expresionesCS						{ $$ =$1; }
				;
				
expresionesCS: expression							{ $$ = new ArrayList<Expression>(); ((List<Expression>)$$).add((Expression)$1); }
			 | expresionesCS ',' expression			{ $$ = $1; ((List<Expression>)$$).add((Expression)$3); } 
			 ;


expression: INT_CONSTANT								{ $$ = new IntLiteral(getLine(),getColumn(), (int)$1);   }
		  | REAL_CONSTANT								{ $$ = new RealLiteral(getLine(),getColumn(), (double)$1); }
		  | CHAR_CONSTANT								{ $$ = new CharLiteral(getLine(),getColumn(), (char)$1); }
		  | ID											{ $$ = new Variable(getLine(),getColumn(), (String)$1);  }
		  | ID '(' expresionesCSOpt ')'					{ $$ = new Invocation(getLine(),getColumn(),new Variable(getLine(),getColumn(), (String)$1),(List<Expression>)$3); }
          | '(' expression ')'							{ $$ = $2; }	
          | expression '[' expression ']'				{ $$ = new Indexing(getLine(),getColumn(),(Expression)$1,(Expression)$3); }
          | '(' tipoSimple ')' expression %prec CAST	{ $$ = new Cast(getLine(),getColumn(),(Type)$2,(Expression)$4); }
          | '-' expression 				  %prec UNARY	{ $$ = new UnaryMinus(getLine(),getColumn(),(Expression)$2); }
          | '!' expression     							{ $$ = new UnaryNot(getLine(),getColumn(),(Expression)$2); }
          | expression '.' ID  							{ $$ = new FieldAccess(getLine(),getColumn(),(Expression)$1,(String)$3); }   	
          | expression '*' expression					{ $$ = new Arithmetic(getLine(),getColumn(),(Expression)$1,"*",(Expression)$3); }
          | expression '+' expression					{ $$ = new Arithmetic(getLine(),getColumn(),(Expression)$1,"+",(Expression)$3); }
          | expression '%' expression					{ $$ = new Arithmetic(getLine(),getColumn(),(Expression)$1,"%",(Expression)$3); }	
          | expression '/' expression					{ $$ = new Arithmetic(getLine(),getColumn(),(Expression)$1,"/",(Expression)$3); }
          | expression '-' expression					{ $$ = new Arithmetic(getLine(),getColumn(),(Expression)$1,"-",(Expression)$3); }
          | expression '>' expression					{ $$ = new Comparision(getLine(),getColumn(),(Expression)$1,">",(Expression)$3); }
          | expression '<' expression					{ $$ = new Comparision(getLine(),getColumn(),(Expression)$1,"<",(Expression)$3); }
          | expression LESS_EQUALS expression			{ $$ = new Comparision(getLine(),getColumn(),(Expression)$1,"<=",(Expression)$3); }
          | expression GREATER_EQUALS expression		{ $$ = new Comparision(getLine(),getColumn(),(Expression)$1,">=",(Expression)$3); }
          | expression EQUALS expression				{ $$ = new Comparision(getLine(),getColumn(),(Expression)$1,"==",(Expression)$3); }
          | expression DISTINCT expression				{ $$ = new Comparision(getLine(),getColumn(),(Expression)$1,"!=",(Expression)$3); }
          | expression OR expression					{ $$ = new Logical(getLine(),getColumn(),(Expression)$1,"||",(Expression)$3); }
          | expression AND expression					{ $$ = new Logical(getLine(),getColumn(),(Expression)$1,"&&",(Expression)$3); }
          ;
		
%%

// * Código Java
// * Se crea una clase "Parser", lo que aquí ubiquemos será:
//	- Atributos, si son variables
//	- Métodos, si son funciones
//   de la clase "Parser"

// * Estamos obligados a implementar:
//	int yylex()
//	void yyerror(String)

// * Referencia al analizador léxico
private Scanner scanner;

// * Llamada al analizador léxico
private int yylex () {
    int token=0;
    try { 
		token=scanner.yylex(); 	
		this.yylval = scanner.getYylval();
    } catch(Throwable e) {
	    System.err.println ("Lexical error at line " + scanner.getLine() + " and column "+scanner.getColumn()+":\n\t"+e); 
    }
    return token;
}

// * Manejo de Errores Sintácticos
public void yyerror (String error) {
    System.err.println ("Syntactical error at line " + scanner.getLine() + " and column "+scanner.getColumn()+":\n\t"+error);
}

// * Constructor del Sintáctico
public Parser(Scanner scanner) {
	this.scanner = scanner;
}

private ASTNode AST;

public ASTNode getAST(){
	return AST;
}

public int getLine(){
	return scanner.getLine();
}

public int getColumn(){
	return scanner.getColumn();
}

private void comprobarCamposRepetidos(List<RecordField> list1, List<RecordField> list2){
		for(RecordField re : list2)
			if(list1.contains(re))
				new ErrorType(getLine(),getColumn(),String.format("ERROR en linea: %d, columna %d: El campo %s ya está declarado. ", getLine(), getColumn(), re.getName()));
}
